<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "file://C:\Cygwin\scilab-4.1\man/manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>optim_kelley_imfil</TITLE>
  <TYPE>Scilab Function  </TYPE>
  <DATE>12-Jan-2007</DATE>
  <SHORT_DESCRIPTION name="optim_kelley_imfil"> Unconstrained implicit filtering code </SHORT_DESCRIPTION>

  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[x,lhist,histout] = optim_kelley_imfil(x0,f,budget,scales,parms)</CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>

  <PARAM>
  <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>x0</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : initial iterate
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>f</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : objective function, the calling sequence for f should be [fout]=f(x)
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>budget</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : add here the parameter description
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>scales</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : max f evals - The iteration will terminate after the iteration that exhausts the budget, default=50*number of variables
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>parms</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : optional argument = array of conrol parameters
       parms(1) = target = value of f at which the iteration should be terminated This is an optional argument, which you SHOULD set to
       something reasonable for your problem. The default is as close to no limit as we can get, -1.d8
       parms(2) = 0 for centered diffs, 1 for forward diffs default and recommended value = 0
       parms(3) = quasi-Newton method selection 0 = none, 1 = bfgs, 2 = SR1 default and recommend value = 1
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>x</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : estimated minimizer
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>lhist</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : number of nonzero rows in histout - number of nonlinear iterations for all the scales 
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>histout</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : iteration history, updated after each nonlinear iteration = lhist x 5 array, the rows are
       [fcount, fval, norm(sgrad), norm(step), iarm]
       fcount = cumulative function evals
       fval = current function value
       norm(sgrad) = current simplex grad norm
       norm(step) = norm of last step 
      iarm=line searches to date =-1 means first iterate at a new scale 
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
  </PARAM_INDENT>
  </PARAM>
 
  <DESCRIPTION>
     <DESCRIPTION_INDENT>
     <DESCRIPTION_ITEM>
     <P>
      Unconstrained implicit filtering code. IMPLICIT FILTERING with SR1 and BFGS quasi-Newton methods
     </P>
     </DESCRIPTION_ITEM>
     <DESCRIPTION_ITEM>
     <P>
      Add here a paragraph of the function description 
     </P>
     </DESCRIPTION_ITEM>
     </DESCRIPTION_INDENT>
  </DESCRIPTION>

  <EXAMPLE><![CDATA[
  function Res = get_min_bound_rosenbrock()
  Res = [-2 -2]';
  endfunction
  function Res = get_max_bound_rosenbrock()
  Res = [2 2]';
  endfunction
  function Res = get_opti_rosenbrock()
  Res = [1 1]';
  endfunction
  function y = rosenbrock(x)
  y = 100*(x(2)-x(1)^2)^2+(1-x(1))^2;
  endfunction
  MaxIt     = 1000;
  Tol       = 1e-6;
  GradTol   = 1e-12;

  Min = get_min_bound_rosenbrock();
  Max = get_max_bound_rosenbrock();

  //
  // Display the cost function
  //

  clf();

  x1 = Min(1):(Max(1)-Min(1))/100:Max(1);
  x2 = Min(2):(Max(2)-Min(2))/100:Max(2);
  for i=1:length(x1)
    for j=1:length(x2)
      z(i,j) = functoopt([x1(i) x2(j)]);
    end
  end
  xset('fpf',' ');
  contour(x1, x2, z, 20);

  function [f, g] = f_optim(x)
  f = functoopt(x);
  g = derivative(functoopt, x); g = g'; // ??
  endfunction

  function [f, g, jac] = f_optim_2(x)
  f = functoopt(x);
  [g, jac] = derivative(functoopt, x); g = g'; jac = jac';// ??
  endfunction

  x0 = [-1.1; 1];

  xtitle(Title + ' function - optim_kelley_imfil','x1','x2');

  printf('optim_kelley_imfil:\n');
  printf('Unconstrained implicit filtering code\n');
  printf('IMPLICIT FILTERING with SR1 and BFGS quasi-Newton methods\n');

  xset('fpf',' ');
  contour(x1, x2, z, 20);

  plot(x0(1), x0(2), 'ro');

  [x_opt, histout, costdata] = optim_kelley_imfil(x0, f_optim, MaxIt);

  plot(x_opt(1), x_opt(2), 'go');

  printf('optim_kelley_imfil: Starting point x0:'); disp(x0);
  printf('optim_kelley_imfil: Final point x_opt:'); disp(x_opt);
  printf('optim_kelley_imfil: Initial fobj = %f - Final fobj = %f\n', functoopt(x0), functoopt(x_opt));
  ]]></EXAMPLE>

  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK> optim_kelley_hooke </LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK> optim_kelley_steep </LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>

  <AUTHORS>
    <AUTHORS_ITEM label='Kelley'>
    C. T. Kelley (tim_kelley@ncsu.edu)
    </AUTHORS_ITEM>
  </AUTHORS>

  <BIBLIO>
    <SP>
    C. T. Kelley, "Iterative Methods for Optimization", SIAM, Philadelphia , 1999, Frontiers in Applied Mathematics, 18 
    </SP>
  </BIBLIO>
</MAN>
